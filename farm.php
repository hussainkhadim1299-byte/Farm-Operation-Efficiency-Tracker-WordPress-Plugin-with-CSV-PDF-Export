<?php
/*
Plugin Name: Farm Operation Efficiency Tracker (Single File)
Description: Front-end farm operation tracker with CSV & PDF export. Shortcode: [farm_efficiency_tracker]
Version: 1.0
Author: Generated by Khadim Hussain Shah
*/

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

function foet_enqueue_assets() {
    // Nothing enqueued via wp_enqueue here because we output everything inline in shortcode for simplicity.
    // If you prefer, move the script/style references to wp_enqueue_script/wp_enqueue_style.
}
add_action('wp_enqueue_scripts', 'foet_enqueue_assets');

function farm_efficiency_tracker_shortcode( $atts ) {
    ob_start();
    ?>
    <style>
    /* --- Inline CSS: clean, responsive --- */
    .foet-wrap{
        max-width:1100px;
        margin:18px auto;
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        color:#1f2937;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(2,6,23,0.08);
        padding:18px;
    }
    .foet-grid{ display: grid; grid-template-columns: 1fr 380px; gap:16px; }
    @media (max-width: 900px){ .foet-grid{ grid-template-columns: 1fr; } }
    .foet-card{ background:#FAFAFB; padding:14px; border-radius:10px; }
    label{ display:block; font-size:13px; margin:6px 0 4px; color:#374151; }
    input[type="text"], input[type="number"], input[type="date"], select, textarea{
        width:100%; padding:8px 10px; border-radius:8px; border:1px solid #E5E7EB; background:#fff;
        box-sizing:border-box;
    }
    .foet-buttons{ display:flex; gap:8px; flex-wrap:wrap; margin-top:10px; }
    button{ cursor:pointer; padding:8px 12px; border-radius:8px; border:0; background:#0ea5a4; color:#fff; }
    button.alt{ background:#6366F1; }
    .small-btn{ padding:6px 8px; font-size:13px; }
    table{ width:100%; border-collapse:collapse; margin-top:12px; font-size:14px; }
    th, td{ padding:8px; border-bottom:1px solid #E6E6E6; text-align:left; }
    .kpi{ display:flex; gap:10px; flex-wrap:wrap; margin-top:8px; }
    .kpi .item{ background:#fff; padding:10px 12px; border-radius:10px; box-shadow:0 4px 14px rgba(2,6,23,0.04); min-width:140px; }
    .suggestions{ background:#FEF9C3; padding:12px; border-radius:10px; margin-top:10px; }
    .muted{ color:#6B7280; font-size:13px; }
    </style>

    <div class="foet-wrap" id="foet">
        <h2>Farm Operation Efficiency Tracker</h2>
        <p class="muted">Track yields, expenses, labor and produce monthly/yearly reports. Export CSV & PDF on client-side.</p>

        <div class="foet-grid">
            <div class="foet-card" style="min-height:380px;">
                <h3 style="margin-top:0">Add Operation</h3>
                <form id="foet-form" onsubmit="return false;">
                    <label>Operation Date</label>
                    <input type="date" id="op-date" required>

                    <label>Crop / Operation</label>
                    <input type="text" id="op-crop" placeholder="e.g., Wheat, Corn, Irrigation">

                    <label>Yield (kg or unit)</label>
                    <input type="number" id="op-yield" min="0" step="0.01" placeholder="e.g., 1200">

                    <label>Total Expense (USD)</label>
                    <input type="number" id="op-expense" min="0" step="0.01" placeholder="e.g., 500">

                    <label>Labor Hours</label>
                    <input type="number" id="op-labor" min="0" step="0.1" placeholder="e.g., 40">

                    <label>Notes</label>
                    <textarea id="op-notes" rows="2" placeholder="Optional notes"></textarea>

                    <div class="foet-buttons">
                        <button class="small-btn" id="add-entry">Add Entry</button>
                        <button type="button" class="small-btn alt" id="clear-entries">Clear All</button>
                        <button type="button" class="small-btn" id="import-sample">Load Sample</button>
                    </div>
                </form>

                <h3 style="margin-top:14px">Entries</h3>
                <div style="overflow:auto; max-height:260px;">
                    <table id="entries-table">
                        <thead>
                            <tr><th>Date</th><th>Crop</th><th>Yield</th><th>Expense</th><th>Labor</th><th>Actions</th></tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>

            <div>
                <div class="foet-card">
                    <h3 style="margin-top:0">Performance Summary</h3>

                    <div class="kpi" id="kpi-row">
                        <div class="item">
                            <div class="muted">Total Yield</div>
                            <div id="kpi-yield" style="font-weight:700; font-size:18px">0</div>
                        </div>
                        <div class="item">
                            <div class="muted">Total Expense (USD)</div>
                            <div id="kpi-expense" style="font-weight:700; font-size:18px">$0.00</div>
                        </div>
                        <div class="item">
                            <div class="muted">Total Labor Hours</div>
                            <div id="kpi-labor" style="font-weight:700; font-size:18px">0</div>
                        </div>
                        <div class="item">
                            <div class="muted">Efficiency Score</div>
                            <div id="kpi-score" style="font-weight:700; font-size:18px">0 / 100</div>
                        </div>
                    </div>

                    <div style="margin-top:12px;">
                        <label>Report Period</label>
                        <select id="report-period">
                            <option value="all">All Data</option>
                            <option value="month">This Month</option>
                            <option value="year">This Year</option>
                        </select>
                    </div>

                    <div class="foet-buttons" style="margin-top:12px;">
                        <button id="export-csv">Export CSV</button>
                        <button id="export-pdf">Download PDF</button>
                    </div>

                    <div style="margin-top:12px;">
                        <h4 style="margin-bottom:6px">AI Suggestions</h4>
                        <div id="ai-suggestions" class="suggestions">No data yet â€” add entries to get suggestions.</div>
                    </div>
                </div>

                <div class="foet-card" style="margin-top:12px;">
                    <h3 style="margin-top:0">Monthly / Yearly Snapshot</h3>
                    <div id="snapshot" class="muted">No data</div>
                </div>
            </div>
        </div>
    </div>

    <!-- jsPDF and autoTable CDN (client-side PDF engine) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>

    <script>
    (function(){
        // Data model (kept in-memory + saved to localStorage for persistence)
        const STORAGE_KEY = 'foet_entries_v1';
        let entries = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');

        // DOM
        const tbody = document.querySelector('#entries-table tbody');
        const kpiYield = document.getElementById('kpi-yield');
        const kpiExpense = document.getElementById('kpi-expense');
        const kpiLabor = document.getElementById('kpi-labor');
        const kpiScore = document.getElementById('kpi-score');
        const aiBox = document.getElementById('ai-suggestions');
        const snapshot = document.getElementById('snapshot');

        // Load initial form values (today)
        document.getElementById('op-date').valueAsDate = new Date();

        function save() {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(entries));
        }

        function formatCurrency(v){
            return '$' + Number(v || 0).toFixed(2);
        }

        function renderEntries() {
            tbody.innerHTML = '';
            if(entries.length === 0){
                tbody.innerHTML = '<tr><td colspan="6" class="muted">No entries</td></tr>';
                updateKPIs();
                return;
            }
            entries.forEach((e, idx) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${e.date}</td>
                                <td>${escapeHtml(e.crop)}</td>
                                <td>${Number(e.yield)}</td>
                                <td>${formatCurrency(e.expense)}</td>
                                <td>${Number(e.labor)}</td>
                                <td>
                                    <button class="small-btn" data-idx="${idx}" onclick="foet_edit(${idx})">Edit</button>
                                    <button class="small-btn alt" data-idx="${idx}" onclick="foet_delete(${idx})">Delete</button>
                                </td>`;
                tbody.appendChild(tr);
            });
            updateKPIs();
        }

        // Escaping simple text
        function escapeHtml(str){
            if(!str) return '';
            return str.replace(/[&<>"']/g, function(m){ return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]});
        }

        // Add entry
        document.getElementById('add-entry').addEventListener('click', () => {
            const date = document.getElementById('op-date').value;
            const crop = document.getElementById('op-crop').value.trim();
            const yieldVal = parseFloat(document.getElementById('op-yield').value || 0);
            const expense = parseFloat(document.getElementById('op-expense').value || 0);
            const labor = parseFloat(document.getElementById('op-labor').value || 0);
            const notes = document.getElementById('op-notes').value.trim();

            if(!date){ alert('Please enter date'); return; }
            if(yieldVal <= 0){ if(!confirm('Yield is zero. Continue?')) return; }

            entries.push({ date, crop, yield: yieldVal, expense: expense, labor: labor, notes});
            save();
            renderEntries();
            clearForm();
        });

        function clearForm(){
            document.getElementById('op-crop').value = '';
            document.getElementById('op-yield').value = '';
            document.getElementById('op-expense').value = '';
            document.getElementById('op-labor').value = '';
            document.getElementById('op-notes').value = '';
            document.getElementById('op-date').valueAsDate = new Date();
        }

        // Edit and delete functions exposed globally for buttons
        window.foet_delete = function(idx){
            if(!confirm('Delete this entry?')) return;
            entries.splice(idx,1);
            save();
            renderEntries();
        };

        window.foet_edit = function(idx){
            const e = entries[idx];
            document.getElementById('op-date').value = e.date;
            document.getElementById('op-crop').value = e.crop;
            document.getElementById('op-yield').value = e.yield;
            document.getElementById('op-expense').value = e.expense;
            document.getElementById('op-labor').value = e.labor;
            document.getElementById('op-notes').value = e.notes;

            // Remove the old entry so when user presses Add, it re-adds as new
            entries.splice(idx,1);
            save();
            renderEntries();
        };

        // Clear all
        document.getElementById('clear-entries').addEventListener('click', () => {
            if(!confirm('Clear ALL entries? This cannot be undone.')) return;
            entries = [];
            save();
            renderEntries();
        });

        // Load sample
        document.getElementById('import-sample').addEventListener('click', () => {
            if(!confirm('Load sample entries?')) return;
            entries = [
                {date: dateStrAdd(-25), crop:'Wheat', yield:1200, expense:800, labor:40, notes:'Good season'},
                {date: dateStrAdd(-200), crop:'Corn', yield:800, expense:500, labor:30, notes:'Irrigation heavy'},
                {date: dateStrAdd(-50), crop:'Wheat', yield:1000, expense:700, labor:35, notes:'Nitrogen applied'},
                {date: dateStrAdd(-10), crop:'Irrigation', yield:0, expense:200, labor:10, notes:'Irrigation event'},
            ];
            save();
            renderEntries();
        });

        function dateStrAdd(days){
            const d = new Date();
            d.setDate(d.getDate() + days);
            return d.toISOString().slice(0,10);
        }

        // KPI calculations and AI-suggestions (JS heuristics)
        function updateKPIs(){
            const period = document.getElementById('report-period').value;
            let filtered = filterByPeriod(entries, period);

            let totalYield = 0, totalExpense = 0, totalLabor = 0;
            filtered.forEach(e => {
                totalYield += Number(e.yield || 0);
                totalExpense += Number(e.expense || 0);
                totalLabor += Number(e.labor || 0);
            });

            kpiYield.textContent = Number(totalYield).toFixed(2);
            kpiExpense.textContent = formatCurrency(totalExpense);
            kpiLabor.textContent = Number(totalLabor).toFixed(2);

            // Compute simple efficiency score (0-100)
            // Components:
            // 1) yield_per_labor: higher is better (normalized)
            // 2) cost_per_yield: lower is better (normalized)
            // We compute normalized scores based on observed data ranges (robust to empty)
            let yieldPerLabor = totalLabor > 0 ? totalYield / totalLabor : 0;
            let costPerYield = totalYield > 0 ? totalExpense / totalYield : totalExpense > 0 ? totalExpense : 0;

            // normalization heuristics:
            // yieldPerLabor: 0..50 => map to 0..60 points (cap)
            // costPerYield: 0..5 => map to 0..40 points inverse (lower cost => higher score)
            let yplScore = Math.max(0, Math.min(60, (yieldPerLabor/50)*60));
            let cpyScore = 0;
            if(costPerYield <= 0) cpyScore = 40;
            else cpyScore = Math.max(0, Math.min(40, (1 - Math.min(costPerYield,5)/5)*40));

            let totalScore = Math.round(yplScore + cpyScore);
            kpiScore.textContent = `${totalScore} / 100`;

            // Create human-friendly snapshot
            if(filtered.length === 0){
                snapshot.textContent = 'No entries for selected period.';
            } else {
                const months = new Set(filtered.map(e => e.date.slice(0,7)));
                snapshot.innerHTML = `<strong>${filtered.length}</strong> operation(s) across <strong>${months.size}</strong> month(s). Average cost per yield: <strong>${(costPerYield||0).toFixed(2)}</strong>`;
            }

            // AI suggestions (heuristic)
            generateAISuggestions({totalYield, totalExpense, totalLabor, yieldPerLabor, costPerYield, totalScore, entries: filtered});
        }

        function filterByPeriod(list, period){
            if(period === 'all') return list.slice();
            const now = new Date();
            if(period === 'month'){
                const m = now.getMonth()+1;
                const y = now.getFullYear();
                return list.filter(e => {
                    const d = new Date(e.date + 'T00:00:00');
                    return (d.getMonth()+1) === m && d.getFullYear() === y;
                });
            }
            if(period === 'year'){
                const y = now.getFullYear();
                return list.filter(e => {
                    const d = new Date(e.date + 'T00:00:00');
                    return d.getFullYear() === y;
                });
            }
            return list.slice();
        }

        function generateAISuggestions(stats){
            const { totalYield, totalExpense, totalLabor, yieldPerLabor, costPerYield, totalScore, entries } = stats;
            let notes = [];

            if(entries.length === 0){
                aiBox.innerHTML = 'No entries yet â€” add operation records and get AI suggestions.';
                return;
            }

            // Suggestion 1: irrigation optimization if irrigation entries with cost and low yield per labor
            const irrigationOps = entries.filter(e => /irrigat/i.test(e.crop));
            if(irrigationOps.length > 0){
                const irCost = irrigationOps.reduce((s,a)=>s+a.expense,0);
                if(irCost > 100 && yieldPerLabor < 20){
                    notes.push(`Irrigation costs are relatively high ($${irCost.toFixed(2)}). Consider scheduling based on soil moisture sensors or optimizing timings. Potential annual saving estimate: ~${estimateSavings('irrigation', irCost).toFixed(0)} USD.`);
                } else {
                    notes.push('Irrigation entries detected. Consider monitoring soil moisture to avoid over-watering.');
                }
            }

            // Suggestion 2: cost-per-yield high -> check input costs
            if(costPerYield > 2.0){
                notes.push(`High cost per unit yield (${costPerYield.toFixed(2)} USD per yield). Look into input costs (fertilizer, seeds) and machinery usage scheduling.`);
            } else {
                notes.push(`Cost per yield looks reasonable (${costPerYield.toFixed(2)}).`);
            }

            // Suggestion 3: labor inefficiency
            if(yieldPerLabor < 12){
                notes.push(`Low yield per labor hour (${yieldPerLabor.toFixed(2)}). Consider mechanization for some tasks or reassigning labor tasks.`);
            } else {
                notes.push(`Labor efficiency OK (${yieldPerLabor.toFixed(2)} yield/hour).`);
            }

            // Score-based action
            if(totalScore < 50){
                notes.push('Overall efficiency score is below 50. Prioritize reducing costs and improving scheduling; run small experiments on irrigation and fertilizer timing.');
            } else {
                notes.push('Overall efficiency looks good. Keep tracking to validate improvements month-to-month.');
            }

            // Actionable checklist (top 3)
            const actions = [];
            if(costPerYield > 2.0) actions.push('Review input suppliers & negotiate bulk discounts.');
            if(yieldPerLabor < 12) actions.push('Pilot mechanized planting/harvesting for 1 field.');
            if(irrigationOps.length > 0 && irrigationOps.reduce((s,a)=>s+a.expense,0) > 100) actions.push('Test a soil moisture sensor for 1 hectare.');

            aiBox.innerHTML = `<ul style="margin:0 0 6px 18px; padding:0;">
                ${notes.map(n=>`<li>${escapeHtml(n)}</li>`).join('')}
            </ul>
            <div style="margin-top:8px;"><strong>Top actions:</strong><ol style="margin:6px 0 0 18px;">${actions.map(a=>`<li>${escapeHtml(a)}</li>`).join('')}</ol></div>`;
        }

        function estimateSavings(type, cost){
            // Simple heuristic estimates for potential annual saving (JS "AI")
            if(type === 'irrigation'){
                return Math.max(0, cost * 0.3); // e.g., 30% savings possible by better scheduling
            }
            return cost * 0.2;
        }

        // CSV export
        document.getElementById('export-csv').addEventListener('click', () => {
            const period = document.getElementById('report-period').value;
            const filtered = filterByPeriod(entries, period);
            if(filtered.length === 0){ alert('No data to export'); return; }

            const header = ['Date','Crop','Yield','Expense','Labor','Notes'];
            const rows = filtered.map(r => [r.date, r.crop, r.yield, r.expense, r.labor, (r.notes || '')]);

            let csvContent = header.join(',') + '\n' + rows.map(r => r.map(c => `"${String(c).replace(/"/g,'""')}"`).join(',')).join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `farm-tracker-${period || 'all'}-${new Date().toISOString().slice(0,10)}.csv`;
            document.body.appendChild(a); a.click(); a.remove();
            URL.revokeObjectURL(url);
        });

        // PDF export using jsPDF
        document.getElementById('export-pdf').addEventListener('click', async () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({orientation: 'portrait', unit: 'pt', format: 'a4'});
            const period = document.getElementById('report-period').value;
            const filtered = filterByPeriod(entries, period);

            // Header
            doc.setFontSize(14);
            doc.text('Farm Operation Efficiency Report', 40, 50);
            doc.setFontSize(10);
            doc.text(`Period: ${period} â€” Generated: ${new Date().toLocaleString()}`, 40, 68);
            doc.text(`Total Entries: ${filtered.length}`, 40, 86);

            // KPIs
            let y = 106;
            doc.setFontSize(11);
            doc.text(`Total Yield: ${kpiYield.textContent}`, 40, y);
            doc.text(`Total Expense: ${kpiExpense.textContent}`, 240, y);
            doc.text(`Total Labor: ${kpiLabor.textContent}`, 400, y);
            doc.text(`Efficiency Score: ${kpiScore.textContent}`, 40, y + 16);

            // Table of entries
            const tableColumn = ["Date","Crop","Yield","Expense","Labor","Notes"];
            const tableRows = filtered.map(e => [e.date, e.crop, String(e.yield), formatCurrency(e.expense), String(e.labor), e.notes || '']);

            // autoTable
            doc.autoTable({
                head: [tableColumn],
                body: tableRows,
                startY: y + 36,
                styles: { fontSize: 9 },
                headStyles: { fillColor: [22, 160, 133] }
            });

            // Add AI suggestions text at the end (truncated if long)
            let finalY = doc.lastAutoTable.finalY + 10;
            doc.setFontSize(10);
            doc.text('AI Suggestions (summary):', 40, finalY);
            const plainSuggestions = document.getElementById('ai-suggestions').innerText || '';
            const split = doc.splitTextToSize(plainSuggestions, 500);
            doc.text(split, 40, finalY + 14);

            doc.save(`farm-report-${period}-${new Date().toISOString().slice(0,10)}.pdf`);
        });

        // Update on period change
        document.getElementById('report-period').addEventListener('change', updateKPIs);

        // initial render
        renderEntries();
    })();
    </script>

    <?php
    return ob_get_clean();
}

add_shortcode('farm_efficiency_tracker', 'farm_efficiency_tracker_shortcode');

//////////////////////////
// Optional: Python snippet below (comment) for advanced server-side AI analysis or ML modeling.
// This snippet is not executed by the PHP plugin. It is provided as reference if you later want to
// run a simple scikit-learn regression to estimate savings or recommend actions server-side.
/*

# python_ml_analysis.py
# Example: using scikit-learn to predict cost-per-yield and recommend interventions.
# Requirements: scikit-learn, pandas, joblib

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import joblib

# Sample load
# df = pd.read_csv('farm_entries.csv')  # expects date, crop, yield, expense, labor, notes

def featurize(df):
    # Convert date to numeric features
    df['date'] = pd.to_datetime(df['date'])
    df['month'] = df['date'].dt.month
    df['year'] = df['date'].dt.year
    # simple encoding for crop
    df['crop_code'] = df['crop'].astype('category').cat.codes
    # target: cost_per_yield
    df['cost_per_yield'] = df.apply(lambda r: r['expense'] / r['yield'] if r['yield'] > 0 else r['expense'], axis=1)
    return df

def train_model(df):
    df = featurize(df)
    features = ['month','year','crop_code','labor','expense']
    X = df[features]
    y = df['cost_per_yield']
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    print('Test R2:', model.score(X_test, y_test))
    joblib.dump(model, 'cost_per_yield_model.joblib')

def predict_savings(model_path, new_data_row):
    model = joblib.load(model_path)
    # new_data_row is dict: month, year, crop_code, labor, expense
    X = pd.DataFrame([new_data_row])
    pred = model.predict(X)[0]
    return pred

# Example usage:
# train_model(pd.read_csv('farm_entries.csv'))
# pred = predict_savings('cost_per_yield_model.joblib', {'month':7,'year':2025,'crop_code':2,'labor':30,'expense':400})
# print('Predicted cost per yield:', pred)

*/
